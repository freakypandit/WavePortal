// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.0;

import "hardhat/console.sol";

contract WavePortal {

   uint256 totalWaves;
   mapping (address => uint256) waveRecords;
   address[] public patreon;
   address public owner;

   event NewWave(address indexed from, uint256 timestamp, string message);

   struct Wave {
      address waver;
      string message;
      uint256 timestamp;
   }

   Wave[] waves;

   constructor() {
      console.log("Yo yo, I am a contract and I am smart");
      owner = msg.sender;
   }

   function wave(uint _waveCount)  public {
      require(msg.sender != owner, "Are you Nuts, stop waving at the mirror.");

      //push the address to new array
      patreon.push(msg.sender);
      
      totalWaves += _waveCount;
      waveRecords[msg.sender] += _waveCount;
      console.log("Congratulations you just received %d from %s", _waveCount, msg.sender);

   }

   function getTotalWaves() public view returns(uint256) {
      return totalWaves;
   }

   function waveHistory() public view {
      for (uint i=0; i< patreon.length; i++) {
         console.log("Received %d waves from %s", waveRecords[patreon[i]], patreon[i]);
      }
   }
}